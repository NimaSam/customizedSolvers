/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pbeTransportFoam;

startFrom       latestTime;//startTime;//

startTime       0;

stopAt          endTime;//

endTime         500;

deltaT          1E-03;//5e-5;

writeControl    adjustableRunTime;

writeInterval   2;//5E-04;//1e-5;//0.01;

purgeWrite      5;

writeFormat     ascii;

writePrecision  6;

writeCompression on;//off;

timeFormat      general;

timePrecision   12;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.9;

maxDeltaT       0.1;

freez          false;//true;

functions
{  
    d43Average
    {
        functionObjectLibs ("libutilityFunctionObjects.so");
        type coded;
        redirectType integral;
        outputControl timeStep;
        code
        #{
	const volScalarField& m0 
                = mesh().lookupObject<volScalarField>("moment.0");
	const volScalarField& m1 
                = mesh().lookupObject<volScalarField>("moment.1");
	const volScalarField& m2 
                = mesh().lookupObject<volScalarField>("moment.2");
        const volScalarField& m3 
                = mesh().lookupObject<volScalarField>("moment.3");              
        const volScalarField& m4
                = mesh().lookupObject<volScalarField>("moment.4");
                
        volScalarField d43(m4/max(m3,VSMALL));
	volScalarField d32(m3/m2);
	volScalarField d10(m1/m0);

        scalar volAverage43 = 0;
	scalar volAverage32 = 0;
	scalar volAverage10 = 0;
        scalar totalVolume = 0;

        forAll (d43, cellI)
        {
            totalVolume += mesh().V()[cellI];
        }

        forAll (d43, cellI)
        {
            volAverage43 += d43[cellI]*mesh().V()[cellI]/totalVolume;
	    volAverage32 += d32[cellI]*mesh().V()[cellI]/totalVolume;
	    volAverage10 += d10[cellI]*mesh().V()[cellI]/totalVolume;
        }

        Info <<"Volume averaged normalized d43: " << volAverage43/(1.0e-6) 
	     <<"\nVolume averaged normalized d32: " << volAverage32/(1.0e-6)
	     <<"\nVolume averaged normalized d10: " << volAverage10/(1.0e-6)	
	<< endl;

        #};
    }
}


// ************************************************************************* //
